#!/bin/bash

# Parallel Pokémon Data Retrieval Script
# Objective: Speed up data retrieval using parallel processing and background processes
# Uses process management tools to fetch multiple Pokémon simultaneously

# Configuration
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
DATA_DIR="pokemon_data"
ERROR_FILE="parallel_errors.txt"
LOG_FILE="parallel_processing.log"
MAX_CONCURRENT_JOBS=3  # Maximum number of parallel processes
REQUEST_TIMEOUT=30     # Timeout for individual requests
MAX_RETRIES=2         # Retry attempts for failed requests
TEMP_DIR="/tmp/pokemon_parallel_$$"  # Unique temp directory

# Colors for output formatting
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Function to print colored output
print_success() { echo -e "${GREEN}$1${NC}"; }
print_info() { echo -e "${BLUE}$1${NC}"; }
print_warning() { echo -e "${YELLOW}$1${NC}"; }
print_error() { echo -e "${RED}$1${NC}"; }
print_header() { echo -e "${CYAN}$1${NC}"; }
print_progress() { echo -e "${MAGENTA}$1${NC}"; }

# Function to log messages with timestamp
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

# Function to log errors
log_error() {
    local error_msg="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S') ERROR: $error_msg" >> "$ERROR_FILE"
    print_error "ERROR: $error_msg"
}

# Function to check dependencies
check_dependencies() {
    local missing_deps=()
    
    for cmd in curl jq; do
        if ! command -v "$cmd" &> /dev/null; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        log_error "Missing required dependencies: ${missing_deps[*]}"
        echo "Please install the missing commands:"
        echo "  Ubuntu/Debian: sudo apt install ${missing_deps[*]}"
        echo "  CentOS/RHEL: sudo yum install ${missing_deps[*]}"
        echo "  macOS: brew install ${missing_deps[*]}"
        exit 1
    fi
}

# Function to setup directories
setup_directories() {
    # Create main data directory
    if [ ! -d "$DATA_DIR" ]; then
        mkdir -p "$DATA_DIR"
        log_message "Created data directory: $DATA_DIR"
        print_info "Created data directory: $DATA_DIR"
    fi
    
    # Create temporary directory for parallel processing
    mkdir -p "$TEMP_DIR"
    log_message "Created temporary directory: $TEMP_DIR"
    
    # Ensure cleanup on exit
    trap cleanup_and_exit EXIT INT TERM
}

# Function to cleanup temporary files and processes
cleanup_and_exit() {
    local exit_code=$?
    
    print_info "Cleaning up temporary files and processes..."
    log_message "Starting cleanup process"
    
    # Kill any remaining background jobs
    if jobs -p | grep -q .; then
        print_warning "Terminating remaining background processes..."
        kill $(jobs -p) 2>/dev/null || true
        wait 2>/dev/null || true
    fi
    
    # Remove temporary directory
    if [ -d "$TEMP_DIR" ]; then
        rm -rf "$TEMP_DIR"
        log_message "Removed temporary directory: $TEMP_DIR"
    fi
    
    log_message "Cleanup completed"
    exit $exit_code
}

# Function to validate Pokémon name
validate_pokemon_name() {
    local pokemon_name="$1"
    
    # Check if name contains only valid characters
    if [[ ! "$pokemon_name" =~ ^[a-zA-Z0-9-]+$ ]]; then
        log_error "Invalid Pokémon name format: $pokemon_name"
        return 1
    fi
    
    return 0
}

# Function to fetch individual Pokémon data with retry logic
fetch_pokemon_worker() {
    local pokemon_name="$1"
    local worker_id="$2"
    local api_url="${API_BASE_URL}/${pokemon_name}"
    local output_file="${DATA_DIR}/${pokemon_name}.json"
    local temp_file="${TEMP_DIR}/${pokemon_name}_${worker_id}.json"
    local status_file="${TEMP_DIR}/${pokemon_name}_status.txt"
    local log_file="${TEMP_DIR}/${pokemon_name}_log.txt"
    local attempt=1
    
    # Initialize status
    echo "STARTED" > "$status_file"
    echo "[Worker $worker_id] Starting fetch for $pokemon_name" >> "$log_file"
    
    # Validate Pokémon name
    if ! validate_pokemon_name "$pokemon_name"; then
        echo "FAILED:INVALID_NAME" > "$status_file"
        return 1
    fi
    
    # Check if file already exists and is valid
    if [ -f "$output_file" ] && jq -e '.name and .id' "$output_file" >/dev/null 2>&1; then
        echo "SKIPPED:EXISTS" > "$status_file"
        echo "[Worker $worker_id] File already exists for $pokemon_name" >> "$log_file"
        return 0
    fi
    
    # Retry loop
    while [ $attempt -le $MAX_RETRIES ]; do
        echo "ATTEMPT:$attempt" > "$status_file"
        echo "[Worker $worker_id] Attempt $attempt/$MAX_RETRIES for $pokemon_name" >> "$log_file"
        
        # Make the API request
        if curl -s --fail --connect-timeout 15 --max-time $REQUEST_TIMEOUT \
               --user-agent "Pokemon-Parallel-Processor/1.0" \
               "$api_url" -o "$temp_file" 2>>"$log_file"; then
            
            # Verify the response is valid JSON with required fields
            if jq -e '.name and .id and .types and .height and .weight' "$temp_file" >/dev/null 2>&1; then
                # Check if the returned Pokémon name matches what we requested
                local returned_name=$(jq -r '.name' "$temp_file" 2>/dev/null)
                if [ "$returned_name" = "$pokemon_name" ]; then
                    # Success! Move temp file to final location
                    mv "$temp_file" "$output_file"
                    echo "SUCCESS:$attempt" > "$status_file"
                    echo "[Worker $worker_id] Successfully fetched $pokemon_name after $attempt attempt(s)" >> "$log_file"
                    return 0
                else
                    echo "[Worker $worker_id] API returned wrong Pokémon: expected '$pokemon_name', got '$returned_name'" >> "$log_file"
                    rm -f "$temp_file"
                fi
            else
                echo "[Worker $worker_id] Invalid JSON or missing fields for $pokemon_name (attempt $attempt)" >> "$log_file"
                rm -f "$temp_file"
            fi
        else
            local curl_exit_code=$?
            echo "[Worker $worker_id] API request failed for $pokemon_name: exit code $curl_exit_code (attempt $attempt)" >> "$log_file"
            rm -f "$temp_file"
        fi
        
        # Wait before retry (except on last attempt)
        if [ $attempt -lt $MAX_RETRIES ]; then
            sleep 2
        fi
        
        ((attempt++))
    done
    
    # All attempts failed
    echo "FAILED:MAX_RETRIES" > "$status_file"
    echo "[Worker $worker_id] Failed to fetch $pokemon_name after $MAX_RETRIES attempts" >> "$log_file"
    return 1
}

# Function to monitor process progress
monitor_progress() {
    local total_pokemon=${#POKEMON_LIST[@]}
    local completed=0
    local running=0
    local failed=0
    local skipped=0
    
    print_progress "Monitoring parallel processing progress..."
    
    while [ $completed -lt $total_pokemon ]; do
        completed=0
        running=0
        failed=0
        skipped=0
        
        # Check status of each Pokémon
        for pokemon in "${POKEMON_LIST[@]}"; do
            local status_file="${TEMP_DIR}/${pokemon}_status.txt"
            
            if [ -f "$status_file" ]; then
                local status=$(cat "$status_file")
                case "$status" in
                    SUCCESS:*)
                        ((completed++))
                        ;;
                    FAILED:*)
                        ((completed++))
                        ((failed++))
                        ;;
                    SKIPPED:*)
                        ((completed++))
                        ((skipped++))
                        ;;
                    STARTED|ATTEMPT:*)
                        ((running++))
                        ;;
                esac
            fi
        done
        
        # Display progress
        printf "\r\033[K"  # Clear line
        printf "${MAGENTA}Progress: ${completed}/${total_pokemon} completed, ${running} running"
        if [ $failed -gt 0 ]; then
            printf ", ${failed} failed"
        fi
        if [ $skipped -gt 0 ]; then
            printf ", ${skipped} skipped"
        fi
        printf "${NC}"
        
        # Break if all completed
        if [ $completed -ge $total_pokemon ]; then
            break
        fi
        
        sleep 1
    done
    
    echo ""  # New line after progress
}

# Function to process batch in parallel
process_parallel_batch() {
    local total_pokemon=${#POKEMON_LIST[@]}
    local pids=()
    local worker_id=1
    local active_jobs=0
    
    print_header "=== Starting Parallel Batch Processing ==="
    print_info "Processing $total_pokemon Pokémon with up to $MAX_CONCURRENT_JOBS concurrent jobs"
    log_message "Starting parallel batch processing with $total_pokemon Pokémon"
    
    # Start monitoring in background
    monitor_progress &
    local monitor_pid=$!
    
    # Process each Pokémon
    for i in "${!POKEMON_LIST[@]}"; do
        local pokemon="${POKEMON_LIST[i]}"
        
        # Wait if we've reached the maximum concurrent jobs
        while [ $active_jobs -ge $MAX_CONCURRENT_JOBS ]; do
            wait -n  # Wait for any background job to complete
            ((active_jobs--))
        done
        
        # Start background job for this Pokémon
        fetch_pokemon_worker "$pokemon" "$worker_id" &
        local pid=$!
        pids+=($pid)
        
        print_info "Started worker $worker_id for $pokemon (PID: $pid)"
        log_message "Started worker $worker_id for $pokemon (PID: $pid)"
        
        ((worker_id++))
        ((active_jobs++))
        
        # Small delay to prevent overwhelming the API
        sleep 0.5
    done
    
    # Wait for all background jobs to complete
    print_info "Waiting for all workers to complete..."
    log_message "Waiting for all ${#pids[@]} workers to complete"
    
    for pid in "${pids[@]}"; do
        wait "$pid"
    done
    
    # Stop monitoring
    kill "$monitor_pid" 2>/dev/null || true
    wait "$monitor_pid" 2>/dev/null || true
    
    print_success "All parallel processing completed!"
    log_message "All parallel processing completed"
}

# Function to analyze results
analyze_results() {
    local total_pokemon=${#POKEMON_LIST[@]}
    local successful=0
    local failed=0
    local skipped=0
    local total_attempts=0
    
    print_header "=== Processing Results Analysis ==="
    
    for pokemon in "${POKEMON_LIST[@]}"; do
        local status_file="${TEMP_DIR}/${pokemon}_status.txt"
        local log_file="${TEMP_DIR}/${pokemon}_log.txt"
        local output_file="${DATA_DIR}/${pokemon}.json"
        
        if [ -f "$status_file" ]; then
            local status=$(cat "$status_file")
            case "$status" in
                SUCCESS:*)
                    local attempts=$(echo "$status" | cut -d: -f2)
                    print_success "✅ $pokemon - Success (${attempts} attempt(s))"
                    ((successful++))
                    ((total_attempts += attempts))
                    ;;
                SKIPPED:*)
                    print_info "⏭️  $pokemon - Skipped (already exists)"
                    ((skipped++))
                    ;;
                FAILED:*)
                    local reason=$(echo "$status" | cut -d: -f2)
                    print_error "❌ $pokemon - Failed ($reason)"
                    ((failed++))
                    ((total_attempts += MAX_RETRIES))
                    
                    # Add detailed error info
                    if [ -f "$log_file" ]; then
                        echo "$(cat "$log_file")" >> "$ERROR_FILE"
                    fi
                    ;;
            esac
        else
            print_error "❌ $pokemon - No status file found"
            ((failed++))
        fi
    done
    
    # Calculate statistics
    local new_downloads=$((successful - skipped))
    local success_rate=0
    if [ $((new_downloads + failed)) -gt 0 ]; then
        success_rate=$(awk "BEGIN {printf \"%.1f\", ($new_downloads/($new_downloads+$failed))*100}")
    fi
    
    local avg_attempts=0
    if [ $successful -gt 0 ]; then
        avg_attempts=$(awk "BEGIN {printf \"%.1f\", ($total_attempts/$successful)}")
    fi
    
    echo ""
    print_header "=== Final Statistics ==="
    print_success "✅ Total Successful: $successful/$total_pokemon"
    if [ $skipped -gt 0 ]; then
        print_info "⏭️  Skipped (existing): $skipped/$total_pokemon"
    fi
    if [ $failed -gt 0 ]; then
        print_error "❌ Failed: $failed/$total_pokemon"
    fi
    
    if [ $new_downloads -gt 0 ]; then
        print_info "📊 Success rate for new downloads: ${success_rate}%"
        print_info "📈 Average attempts per success: ${avg_attempts}"
    fi
    
    # Log final statistics
    log_message "Final results: Success=$successful, Failed=$failed, Skipped=$skipped"
    log_message "Success rate: ${success_rate}%, Average attempts: ${avg_attempts}"
}

# Function to validate downloaded files
validate_files() {
    print_header "=== File Validation ==="
    local validation_errors=0
    
    for pokemon in "${POKEMON_LIST[@]}"; do
        local file_path="${DATA_DIR}/${pokemon}.json"
        
        if [ -f "$file_path" ]; then
            # Check file size
            local file_size=$(stat -c%s "$file_path" 2>/dev/null || stat -f%z "$file_path" 2>/dev/null)
            if [ "$file_size" -lt 100 ]; then
                print_warning "⚠️  ${pokemon}.json seems too small ($file_size bytes)"
                ((validation_errors++))
                continue
            fi
            
            # Validate JSON structure and required fields
            if jq -e '.name and .id and .types and .height and .weight' "$file_path" >/dev/null 2>&1; then
                print_success "✅ ${pokemon}.json - Valid"
            else
                print_warning "⚠️  ${pokemon}.json - Missing required fields"
                ((validation_errors++))
            fi
        else
            print_error "❌ ${pokemon}.json - File not found"
            ((validation_errors++))
        fi
    done
    
    if [ $validation_errors -eq 0 ]; then
        print_success "All files validated successfully!"
    else
        print_warning "$validation_errors validation issues found"
    fi
    
    log_message "File validation completed with $validation_errors errors"
}

# Function to display file statistics
show_statistics() {
    print_header "=== File Statistics ==="
    
    for pokemon in "${POKEMON_LIST[@]}"; do
        local file_path="${DATA_DIR}/${pokemon}.json"
        
        if [ -f "$file_path" ]; then
            local file_size=$(stat -c%s "$file_path" 2>/dev/null || stat -f%z "$file_path" 2>/dev/null)
            local formatted_size=$(numfmt --to=iec-i --suffix=B "$file_size" 2>/dev/null || echo "${file_size}B")
            
            # Extract basic info using jq
            local pokemon_id=$(jq -r '.id' "$file_path" 2>/dev/null || echo "N/A")
            local pokemon_height=$(jq -r '.height' "$file_path" 2>/dev/null || echo "N/A")
            local pokemon_weight=$(jq -r '.weight' "$file_path" 2>/dev/null || echo "N/A")
            
            printf "%-15s | ID: %-3s | Size: %-8s | H: %-3s | W: %-3s\n" \
                   "$pokemon" "$pokemon_id" "$formatted_size" "$pokemon_height" "$pokemon_weight"
        else
            printf "%-15s | ❌ File not found\n" "$pokemon"
        fi
    done
}

# Function to display usage
show_usage() {
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "Parallel Pokémon data retrieval script using background processes"
    echo ""
    echo "OPTIONS:"
    echo "  -h, --help              Show this help message"
    echo "  -j, --jobs NUM          Set maximum concurrent jobs (default: $MAX_CONCURRENT_JOBS)"
    echo "  -t, --timeout SEC       Set request timeout (default: $REQUEST_TIMEOUT seconds)"
    echo "  -r, --retries NUM       Set maximum retries (default: $MAX_RETRIES)"
    echo "  -o, --output DIR        Set output directory (default: $DATA_DIR)"
    echo "  -v, --validate          Only validate existing files"
    echo "  -s, --stats             Show file statistics"
    echo ""
    echo "Examples:"
    echo "  $0                          # Run with default settings"
    echo "  $0 --jobs 5                # Use up to 5 concurrent processes"
    echo "  $0 --timeout 60             # Set 60-second timeout per request"
    echo "  $0 --retries 3              # Retry up to 3 times on failure"
    echo "  $0 --output my_data         # Save to 'my_data' directory"
    echo "  $0 --validate               # Only validate existing files"
    echo ""
    echo "Parallel Processing Features:"
    echo "  • Background job management with process monitoring"
    echo "  • Configurable concurrency limits to prevent API overload"
    echo "  • Real-time progress tracking during parallel execution"
    echo "  • Automatic cleanup of temporary files and processes"
    echo "  • Comprehensive error handling and retry logic"
}

# Main execution function
main() {
    local validate_only=false
    local stats_only=false
    local start_time
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -j|--jobs)
                MAX_CONCURRENT_JOBS="$2"
                if ! [[ "$MAX_CONCURRENT_JOBS" =~ ^[0-9]+$ ]] || [ "$MAX_CONCURRENT_JOBS" -lt 1 ] || [ "$MAX_CONCURRENT_JOBS" -gt 10 ]; then
                    echo "Error: Jobs must be between 1 and 10" >&2
                    exit 1
                fi
                shift 2
                ;;
            -t|--timeout)
                REQUEST_TIMEOUT="$2"
                if ! [[ "$REQUEST_TIMEOUT" =~ ^[0-9]+$ ]] || [ "$REQUEST_TIMEOUT" -lt 5 ]; then
                    echo "Error: Timeout must be at least 5 seconds" >&2
                    exit 1
                fi
                shift 2
                ;;
            -r|--retries)
                MAX_RETRIES="$2"
                if ! [[ "$MAX_RETRIES" =~ ^[0-9]+$ ]] || [ "$MAX_RETRIES" -lt 1 ] || [ "$MAX_RETRIES" -gt 5 ]; then
                    echo "Error: Retries must be between 1 and 5" >&2
                    exit 1
                fi
                shift 2
                ;;
            -o|--output)
                DATA_DIR="$2"
                shift 2
                ;;
            -v|--validate)
                validate_only=true
                shift
                ;;
            -s|--stats)
                stats_only=true
                shift
                ;;
            *)
                echo "Unknown option: $1" >&2
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Initialize error and log files
    > "$ERROR_FILE"
    > "$LOG_FILE"
    
    # Record start time
    start_time=$(date +%s)
    log_message "=== Parallel Processing Session Started ==="
    log_message "Configuration: Jobs=$MAX_CONCURRENT_JOBS, Timeout=${REQUEST_TIMEOUT}s, Retries=$MAX_RETRIES"
    
    # Check dependencies
    check_dependencies
    
    # Setup directories
    setup_directories
    
    # Execute based on options
    if [ "$validate_only" = true ]; then
        validate_files
    elif [ "$stats_only" = true ]; then
        show_statistics
    else
        # Run full parallel processing
        process_parallel_batch
        echo ""
        analyze_results
        echo ""
        validate_files
        echo ""
        show_statistics
    fi
    
    # Calculate and display total execution time
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    echo ""
    print_success "Total execution time: ${duration} seconds"
    log_message "Total execution time: ${duration} seconds"
    
    # Show error summary if there were any errors
    if [ -s "$ERROR_FILE" ]; then
        echo ""
        print_warning "Some errors occurred during processing. Check $ERROR_FILE for details."
    fi
    
    log_message "=== Parallel Processing Session Completed ==="
}

# Execute main function with all arguments
main "$@"
